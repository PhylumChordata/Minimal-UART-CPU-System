Extended Backus-Naur-Form (EBNF) of MIN (Minimal CPU)
-----------------------------------------------------

Note: Implementations of MIN exist in Phython, C++ and in assembler
on the 'Minimal CPU System'. The Python implementation is meant for
demonstration purposesn only. See the table below for differences.

+-------------------+--------+-------------+------------+----------------------------------+
| Difference        | Python | Minimal CPU | C++ OpenGL | Description                      |
+-------------------+--------+-------------+------------+----------------------------------+
| include           |   -    |      +      |      +     | include additional program text  |
| HEX numbers       |   -    |      +      |      +     | hexadecimal notation 0xffff      |
| delay()           |   -    |      -      |      +     | milliseconds delay function      |
| str()             |   +    |      #      |      #     | int-to-string conversion         |
| int()             |   +    |      #      |      #     | string-to-int conversion         |
| input()           |    +   |      #      |      #     | line text input                  |
| ~ & | ^ << >>     |   -    |      +      |      +     | bitwise operators                |
+-------------------+--------+-------------+------------+----------------------------------+
# implementation in MIN itself via include "std.min" library.

letter          = 'a' | ... | 'z' | 'A' | ... | 'Z' ;
digit           = '0' | ... | '9' ;
rel-op          = '==' | '!=' | '<' | '>' | '<=' | '>=' ;
str-op          = '==' | '!=' ;
add-op          = '+'  | '-' ;
mul-op          = '*'  | '/' ;
number          = digit, { digit } ;
identifier      = letter, { letter | digit | '_' } ;
whitespace      = ' ' | '\r' | '\t' | ':' | ';' ;
character       = ? any ASCII character ? ;
hexdigit        = digit | 'a' | ... | 'f' ;
hexnumber       = '0x', hexdigit, { hexdigit } ;

file            = { statement }, { NEWLINE }, ENDMARKER ;
statement       = { NEWLINE }, ? OKDENT ?, simple-line | compound-stmt ;
simple-line     = simple-stmt, { simple-stmt }, NEWLINE ;

simple-stmt     = 'print', expr-list
                | 'break'
                | 'return', [ expr ]
                | identifier, '(', [ expr-list ], ')'           (* sub call *)
                | identifier, '=', expr ;                       (* assignment *)

compound-stmt   = 'if', bool-expr, block,
                  { { NEWLINE }, ? OKDENT ?, 'elif', block },
                  [ { NEWLINE }, ? OKDENT ?, 'else', block ]
                | 'while', bool-expr, block
                | 'def', ? NODENT ?, identifier, '(', [ param-list ], ')', block ;
                | 'include', '"', { character }, '"'            (* inlcude at the end of the file *)

block           = NEWLINE, ? INDENT ?, statement, { statement }, ? DEDENT ?
                | simple-line ;

expr            = array-expr | math-expr ;
expr-list       = expr, { ',', expr } ;
param-list      = [ '&' ], identifier, { ',', [ '&' ], identifier } ;

array           = '[', [ math-expr, { ',', math-expr } ], ']'   (* returns int[] *)
                | '"', { character }, '"'                       (* returns chr[] *)
                | identifier, '(', [ expr-list ], ')'
                | identifier
                | array, '[', math-expr, '..', math-expr, ']' ; (* array slicing *)
array-expr      = array { '+' array } ;                         (* concatenation *)

math-factor     = '(', math-expr, ')'
                | number | hexnumber
                | "'", character, "'"
                | 'key', '(', ')'
                | 'len', '(', array-expr, ')'
                | 'rnd', '(', ')'                               (* pseudo-random byte *)
                | identifier '(', [ expr-list ], ')'
                | identifier
                | array, '[', math-expr, ']' ;                  (* element access *)
math-inv        = [ '~' ], math-factor
math-bitwise    = math-inv, { ( '&' | '|' | '^' | '>>' | '<<' ), math-inv } ;
math-term       = math-bitwise, { mul-op, math-bitwise } ;
math-expr       = [ add-op ], math-term { add-op, math-term } ;

bool-factor     = [ 'not' ], math-expr, [ rel-op, math-expr ]
                | [ 'not' ], array-expr, [ str-op, array-expr ] ;
bool-term       = bool-factor, { 'and', bool-factor } ;
bool-expr       = bool-term, { 'or', bool-term } ;

Copyright 2022 Carsten Herting (slu4)

LICENSING INFORMATION
This file is part of MIN. MIN is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.
MIN is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
License for more details. You should have received a copy of the GNU General Public License along
with this program. If not, see https://www.gnu.org/licenses/.